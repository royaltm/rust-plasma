var searchIndex = JSON.parse('{\
"plasma":{"doc":"A Plasma struct and tools for rendering animated eye-candy …","t":[16,16,3,3,3,3,8,8,8,16,16,16,16,16,16,16,16,16,8,18,3,8,3,8,8,3,3,8,3,3,3,8,3,3,6,6,3,3,3,3,3,3,8,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,10,11,11,12,11,11,11,5,11,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CalcIterH","CalcIterV","F32PaIter","F32PaPairIter","F32PaQuadIter","F32PaTripleIter","ICProducer","IntermediateCalculator","IntermediateCalculatorProducer","IntermediateH","IntermediateV","Item","IterOne","IterPair","IterQuad","IterTriple","LineCalcH","LineCalcV","Mixer","PIXEL_BYTES","PhaseAmp","PhaseAmpAccess","PhaseAmpCfg","PhaseAmpConfig","PhaseAmpDataExp","PhaseAmpsPairIter","PhaseAmpsQuadIter","PhaseAmpsSelect","PhaseAmpsTripleIter","PixelBufRGB24","PixelBufRGBA8","PixelBuffer","PixelRgb","Plasma","PlasmaICP","PlasmaICPExtPa","PlasmaInterCalcProducer","PlasmaLineCalc","PlasmaMixIter","PlasmaMixer","RgbIter","RgbaIter","ToColor8","add","add_assign","amplitude","amplitude","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate","calculate","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compose_h_iter","compose_h_iter","compose_v_iter","compose_v_iter","default","default","default","delta_delta_phase_abs_max","delta_delta_phase_abs_max","delta_phase_abs_max","delta_phase_abs_max","div","div_assign","eq","eq","eq","eq","eq","export","export","export_phase_amps","export_phase_amps","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hsv","g","import_phase_amps","import_phase_amps","intermediate_h_len","intermediate_h_len","intermediate_v_len","intermediate_v_len","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","iter_pa_pairs","iter_pa_quads","iter_pa_triples","iter_phase_amps","iter_rgb_values","iter_rgba_values","len","len","len","len","len","len","len","len","len","len","max_steps","max_steps","max_steps","min_steps","min_steps","min_steps","mix_pixels","mix_pixels","mul","mul_assign","neg","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","phase","phase","pixel_height","pixel_width","put_pixel","put_pixel","put_pixel","r","rem","rem_assign","render","render_part","render_part","select","set_amplitude","set_amplitude","set_phase","set_phase","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","sub_assign","to_color_u8clamped","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["plasmad":["Provide an iterator implementation which produce …","Provide an iterator implementation which produce …","","","","","A convenient trait alias for plasma render methods.","Implementations of this trait should compute the vertical …","Implementations of this trait should produce an iterator …","This type should be an array of the type T for an …","This type should be an array of the type T for an …","","","","","","Provide an implementation of a IntermediateCalculator for …","Provide an implementation of a IntermediateCalculator for …","Implementations of this trait should compute the color of …","Specifies how many bytes a single pixel occupies.","Holds a phase and an amplitude along with their animation …","A trait for querying and updating phase’n’amplitude","Holds parameters of phase and amplitude changes for …","A trait for querying parameters of phase and amplitude …","A trait that allows importing and exporting of phase’n’…","","","A trait that allows selecting a subset of phase’n’…","","A PixelBuffer tool for a RGB24 buffer (3 bytes/pixel: red, …","A PixelBuffer tool for a RGBA8 buffer (4 bytes/pixel: red, …","The trait for putting pixels into byte buffers.","A struct representing one or more pixels in the linear RGB …","The struct that holds the meta information about current …","A convenient type to be used with …","A convenient type to be used with …","Provides a default implementation of a …","Provides a default implementation of a …","Provides a default implementation of an iterator of …","A default implementation of a Mixer is provided for this …","An iterator of PixelRgb color components.","An iterator of PixelRgb color components plus an alpha …","Provides a method of converting color part from a <code>f32</code> type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes an intermediate data for a given angle.","","","","","","","","","","","","","","","","Should return an instance of a …","","Should return an instance of a …","","","","","","","","","","","","","","","","","","","Exports the internal plasma state into the Vec of 32bit …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an instance of a PixelRgb from HSV color …","","","Import the internal plasma state from a slice of 32bit …","Returns the number of intermediate horizontal values.","Returns the number of intermediate horizontal values.","Returns the number of intermediate vertical values.","Returns the number of intermediate vertical values.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Creates a RgbIter from this instance of PixelRgb.","Creates a RgbaIter from this instance of PixelRgb.","","","","","","","","","","","","","","","","","The implementors should compute a pixel and send it as an …","","","","","Creates an instance of PixelRgb from RGB color components.","","Creates new PhaseAmpCfg instance from the provided …","Creates randomized single phase and amplitude pair.","Creates new plasma instance.","","","","","","","","","","","","","The plasma pixel height","The plasma pixel width","Puts bytes from a <code>pixel</code> into the provided <code>buffer</code> using a …","","","","","","Renders the plasma into the provided <code>buffer</code>.","Renders the part of the plasma into the provided <code>buffer</code> …","Renders the part of the plasma into the provided <code>buffer</code>.","The range should always be bounded.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs a one step update of the phase and amplitude pair …","Animates the plasma by modifying the internal PhaseAmp …","","","","","","","","","","","","","","","","","","",""],"i":[31,31,0,0,0,0,0,0,0,32,32,33,33,33,33,33,31,31,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,35,3,1,4,16,36,37,38,1,5,6,7,8,3,17,18,19,20,21,22,23,9,4,16,36,37,38,1,5,6,7,8,3,17,18,19,20,21,22,23,9,39,4,1,5,6,7,8,3,9,1,5,6,7,8,3,9,31,36,31,36,1,8,3,40,8,40,8,1,1,1,7,8,3,9,35,35,41,9,1,7,8,3,9,4,16,36,37,38,1,5,6,7,8,3,17,18,19,20,21,22,23,9,1,1,41,9,32,32,32,32,4,16,36,37,38,1,5,6,7,8,3,17,18,19,20,21,22,23,9,16,5,6,17,18,19,20,21,22,23,33,33,33,33,1,1,16,5,6,17,18,19,20,21,22,23,40,8,9,40,8,9,32,7,1,1,1,1,7,8,3,9,16,5,6,17,18,19,20,21,22,23,35,3,9,9,34,37,38,1,1,1,9,0,9,33,35,3,35,3,16,5,6,17,18,19,20,21,22,23,1,1,42,1,5,6,7,8,3,9,4,16,36,37,38,1,5,6,7,8,3,17,18,19,20,21,22,23,9,4,16,36,37,38,1,5,6,7,8,3,17,18,19,20,21,22,23,9,4,16,36,37,38,1,5,6,7,8,3,17,18,19,20,21,22,23,9,3,9,4,16,36,37,38,1,5,6,7,8,3,17,18,19,20,21,22,23,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[1,1]],[[],2],[3,2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,2],2],[1,1],[5,5],[6,6],[7,7],[8,8],[3,3],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],8],[[],3],[[],2],[8,2],[[],2],[8,2],[[1,10],1],[[1,10]],[[1,1],11],[[7,7],11],[[8,8],11],[[3,3],11],[[9,9],11],[12],[12],[12],[[9,12]],[[1,13],14],[[7,13],14],[[8,13],14],[[3,13],14],[[9,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2,2],1],0,[[]],[9],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,5],[[1,2],6],[16,15],[5,15],[6,15],[17,15],[18,15],[19,15],[20,15],[21,15],[22,15],[23,15],[[],2],[8,2],[9,2],[[],2],[8,2],[9,2],[24],[[7,24]],[[1,10],1],[[1,10]],[1,1],[[2,2,2],1],[[],7],[[2,2],8],[[],3],[[25,25,8],9],[16,26],[5,[[26,[2]]]],[6,[[26,[2]]]],[17,26],[18,26],[19,26],[20,26],[21,26],[22,26],[23,26],[[],2],[3,2],0,0,[1],[1],[1],0,[[1,10],1],[[1,10]],[[9,15,[26,[12]]]],[[15,15,15,15,15,15,15,[26,[12]]]],[[9,15,15,15,15,15,[26,[12]]]],[[[27,[15]]]],[2],[[3,2]],[2],[[3,2]],[16],[5],[6],[17],[18],[19],[20],[21],[22],[23],[[1,1],1],[[1,1]],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[3],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"PixelRgb"],[15,"f32"],[3,"PhaseAmp"],[3,"PlasmaLineCalc"],[3,"RgbIter"],[3,"RgbaIter"],[3,"PlasmaMixer"],[3,"PhaseAmpCfg"],[3,"Plasma"],[8,"Copy"],[15,"bool"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"PlasmaMixIter"],[3,"PhaseAmpsQuadIter"],[3,"PhaseAmpsTripleIter"],[3,"PhaseAmpsPairIter"],[3,"F32PaQuadIter"],[3,"F32PaTripleIter"],[3,"F32PaPairIter"],[3,"F32PaIter"],[8,"FnMut"],[15,"u32"],[4,"Option"],[3,"Range"],[15,"u8"],[4,"Result"],[3,"TypeId"],[8,"IntermediateCalculatorProducer"],[8,"Mixer"],[8,"PhaseAmpsSelect"],[8,"PixelBuffer"],[8,"PhaseAmpAccess"],[3,"PlasmaInterCalcProducer"],[3,"PixelBufRGB24"],[3,"PixelBufRGBA8"],[8,"IntermediateCalculator"],[8,"PhaseAmpConfig"],[8,"PhaseAmpDataExp"],[8,"ToColor8"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
