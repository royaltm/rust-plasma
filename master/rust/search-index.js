var N = null;var searchIndex = {};
searchIndex["plasma"]={"doc":"A [Plasma] struct and tools for rendering animated eye-candy pixels.","items":[[3,"PhaseAmpCfg","plasma","Holds parameters of phase and amplitude changes for [PhaseAmpConfig] trait.",N,N],[3,"PhaseAmp","","Holds a phase and an amplitude along with their animation state.",N,N],[3,"PhaseAmpsPairIterator","","",N,N],[3,"F32PaPairIterator","","",N,N],[3,"Plasma","","The struct that holds the meta information about current plasma state",N,N],[12,"pixel_width","","The plasma pixel width",0,N],[12,"pixel_height","","The plasma pixel height",0,N],[3,"PixelRGB24","","Implements [PixelBuffer] for RGB24 buffer (3 bytes/pixel: red, green, blue).",N,N],[3,"PixelRGBA8","","Implements [PixelBuffer] for RGBA8 buffer (4 bytes/pixel: red, green, blue, alpha).",N,N],[5,"render_part","","Renders the part of the plasma into the provided `buffer` without the [Plasma] instance.",N,N],[11,"new","","Creates new [PhaseAmpCfg] instance from the provided arguments.",1,[[["f32"],["f32"]],["self"]]],[11,"new","","Creates randomized single phase and amplitude pair.",2,[[["c"],["r"]],["self"]]],[11,"update","","Performs a one step update of the phase and amplitude pair animation.",2,[[["self"],["c"],["r"]]]],[11,"new","","Creates new plasma instance.",0,[[["u32"],["u32"],["phaseampcfg"],["r"]],["self"]]],[11,"update","","Animates the plasma by modifying the internal [PhaseAmp] variables.",0,[[["self"],["r"]]]],[11,"render","","Renders the plasma into the provided `buffer`.",0,N],[11,"render_part","","Renders the part of the plasma into the provided `buffer`.",0,N],[11,"import_phase_amps","","Import the internal plasma state from a slice of 32bit floats.",0,N],[11,"export_phase_amps","","Exports the internal plasma state into the [Vec] of 32bit floats.",0,[[["self"],["vec"]]]],[11,"min_steps","","",0,[[["self"]],["f32"]]],[11,"max_steps","","",0,[[["self"]],["f32"]]],[8,"PhaseAmpConfig","","A trait for querying parameters of phase and amplitude changes.",N,N],[10,"min_steps","","",3,[[["self"]],["f32"]]],[10,"max_steps","","",3,[[["self"]],["f32"]]],[10,"delta_phase_abs_max","","",3,[[["self"]],["f32"]]],[10,"delta_delta_phase_abs_max","","",3,[[["self"]],["f32"]]],[8,"PhaseAmpAccess","","A trait for querying and updating phase'n'amplitude",N,N],[10,"phase","","",4,[[["self"]],["f32"]]],[10,"amplitude","","",4,[[["self"]],["f32"]]],[10,"set_phase","","",4,[[["self"],["f32"]]]],[10,"set_amplitude","","",4,[[["self"],["f32"]]]],[11,"export","","",4,[[["self"],["vec"]]]],[8,"PhaseAmpDataExp","","A trait that allows importing and exporting of phase'n'amplitude data",N,N],[10,"export_phase_amps","","",5,[[["self"],["vec"]]]],[10,"import_phase_amps","","",5,N],[8,"PhaseAmpsSelect","","A trait that allows selecting a subset of phase'n'amplitude and iterate over pairs of it.",N,N],[16,"PairIter","","",6,N],[16,"Item","","",6,N],[10,"select","","The range should always be bounded. # Panics",6,[[["self"],["range",["usize"]]],["self"]]],[10,"into_pa_pair_iter","","",6,N],[8,"PixelBuffer","","The trait for putting pixels into byte buffers.",N,N],[10,"pixel_bytes","","A number of bytes a single pixel occupies",7,[[],["usize"]]],[10,"put_pixel","","Puts a single `pixel` into the provided `buffer` at the given `offset`. The `pixel` should implement [IntoColor] trait from [palette]",7,[[["i"],["c"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"adapt_into_using","","",1,[[["self"],["m"]],["d"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"adapt_into_using","","",2,[[["self"],["m"]],["d"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"adapt_into_using","","",8,[[["self"],["m"]],["d"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"adapt_into_using","","",9,[[["self"],["m"]],["d"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"adapt_into_using","","",0,[[["self"],["m"]],["d"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"adapt_into_using","","",10,[[["self"],["m"]],["d"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"adapt_into_using","","",11,[[["self"],["m"]],["d"]]],[11,"min_steps","","",1,[[["self"]],["f32"]]],[11,"max_steps","","",1,[[["self"]],["f32"]]],[11,"delta_phase_abs_max","","",1,[[["self"]],["f32"]]],[11,"delta_delta_phase_abs_max","","",1,[[["self"]],["f32"]]],[11,"phase","","",2,[[["self"]],["f32"]]],[11,"set_phase","","",2,[[["self"],["f32"]]]],[11,"amplitude","","",2,[[["self"]],["f32"]]],[11,"set_amplitude","","",2,[[["self"],["f32"]]]],[11,"pixel_bytes","","",10,[[],["usize"]]],[11,"put_pixel","","",10,[[["i"],["c"]]]],[11,"pixel_bytes","","",11,[[],["usize"]]],[11,"put_pixel","","",11,[[["i"],["c"]]]],[11,"eq","","",1,[[["self"],["phaseampcfg"]],["bool"]]],[11,"ne","","",1,[[["self"],["phaseampcfg"]],["bool"]]],[11,"eq","","",2,[[["self"],["phaseamp"]],["bool"]]],[11,"ne","","",2,[[["self"],["phaseamp"]],["bool"]]],[11,"eq","","",0,[[["self"],["plasma"]],["bool"]]],[11,"ne","","",0,[[["self"],["plasma"]],["bool"]]],[11,"default","","",2,[[],["phaseamp"]]],[11,"default","","",1,[[],["self"]]],[11,"clone","","",1,[[["self"]],["phaseampcfg"]]],[11,"clone","","",2,[[["self"]],["phaseamp"]]],[11,"clone","","",0,[[["self"]],["plasma"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"export","","",4,[[["self"],["vec"]]]]],"paths":[[3,"Plasma"],[3,"PhaseAmpCfg"],[3,"PhaseAmp"],[8,"PhaseAmpConfig"],[8,"PhaseAmpAccess"],[8,"PhaseAmpDataExp"],[8,"PhaseAmpsSelect"],[8,"PixelBuffer"],[3,"PhaseAmpsPairIterator"],[3,"F32PaPairIterator"],[3,"PixelRGB24"],[3,"PixelRGBA8"]]};
initSearch(searchIndex);
